/*
 * MyAnimeList API (beta ver.)
 *
 * MyAnimeList.net is the property of MyAnimeList Co.,Ltd. All Rights Reserved.  ## Versioning  There are multiple versions of the API. You can specify a version by including it in the request uri:  (During closed beta, version starts with '0.')  `https://api.myanimelist.net/v2`  The version is incremented if any backwards incompatible changes are introduced to the API.  Examples of backwards incompatible changes are belows:  - Removing existing endpoints. - Removing existing fields of API responses. - Changing mean of the existing fields.  On the other hand, belows are examples of backwards compatible changes:  - Adding new endpoints. - Adding new optional request parameters. - Adding new fields to existing API responses. - Changing the order of fields in existing API responses. - Changing the contents of fields that suffixed by `_formatted`.   ## Common formats  ### List / Pagination  ```json {   \"data\": [     {...},     {...},     ...   ],   \"paging\": {     \"previous\": \"https://xxx\",     \"next\": \"https://xxx\"   } } ```      ### Date / Time format  <table> <tr> <th>Format <th>Type <th>Sample <th>Description </tr>  <tr> <td>date-time <td>string <td>\"2015-03-02T06:03:11+00:00\"  <td>ISO 8601 </tr>      <tr> <td>date <td>string <td>\"2017-10-23\" or <br>\"2017-10\" or <br>\"2017\" <td> </tr>  <tr> <td>time <td>string <td>\"01:35\" <td> </tr>  </table>  ### Error format   ```json {   \"error\": \"invalid_token\"   \"message\": \"token is invalid\", } ```  ## Common parameters  ### Parameters for endpoints that return a list  | Name | Description | | - -- | - -- | | limit |  | | offset |  |  ### Choosing fields  By default, the API doesn’t return all fields.  You can choose the fields that you want returned with the `fields` parameter.  Example:  ``` fields=synopsis,my_list_status{priority,comments} ```  ### Not Safe For Work  By default, some APIs don’t return nsfw content.  You can control this behavior with the `nsfw` parameter.  | Name | Description | | - -- | - -- | | nsfw | `true` or `false` |   ## Common status codes  | Status code | Error code | Description | | - -- - | - -- - | - -- - | | 400 Bad Request | - | Invalid Parameters | | 401 Unauthorized | invalid_token | Expired access tokens, Invalid access tokens, etc. | | 403 Forbidden | - | DoS detected etc. | | 404 Not Found | - | |  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MangaForListAllOf
    /// </summary>
    [DataContract(Name = "MangaForList_allOf")]
    public partial class MangaForListAllOf : IEquatable<MangaForListAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MangaForListAllOf" /> class.
        /// </summary>
        /// <param name="mediaType">- unknown - manga - novel - one_shot - doujinshi - manhwa - manhua - oel .</param>
        /// <param name="status">Publishing status.  - finished - currently_publishing - not_yet_published .</param>
        /// <param name="myListStatus">myListStatus.</param>
        /// <param name="numVolumes">If unknown, it is 0. .</param>
        /// <param name="numChapters">If unknown, it is 0. .</param>
        /// <param name="authors">authors.</param>
        public MangaForListAllOf(string mediaType = default(string), string status = default(string), Object myListStatus = default(Object), int numVolumes = default(int), int numChapters = default(int), List<PersonRoleEdge> authors = default(List<PersonRoleEdge>))
        {
            this.MediaType = mediaType;
            this.Status = status;
            this.MyListStatus = myListStatus;
            this.NumVolumes = numVolumes;
            this.NumChapters = numChapters;
            this.Authors = authors;
        }

        /// <summary>
        /// - unknown - manga - novel - one_shot - doujinshi - manhwa - manhua - oel 
        /// </summary>
        /// <value>- unknown - manga - novel - one_shot - doujinshi - manhwa - manhua - oel </value>
        [DataMember(Name = "media_type", EmitDefaultValue = false)]
        public string MediaType { get; set; }

        /// <summary>
        /// Publishing status.  - finished - currently_publishing - not_yet_published 
        /// </summary>
        /// <value>Publishing status.  - finished - currently_publishing - not_yet_published </value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets MyListStatus
        /// </summary>
        [DataMember(Name = "my_list_status", EmitDefaultValue = false)]
        public Object MyListStatus { get; set; }

        /// <summary>
        /// If unknown, it is 0. 
        /// </summary>
        /// <value>If unknown, it is 0. </value>
        [DataMember(Name = "num_volumes", EmitDefaultValue = false)]
        public int NumVolumes { get; set; }

        /// <summary>
        /// If unknown, it is 0. 
        /// </summary>
        /// <value>If unknown, it is 0. </value>
        [DataMember(Name = "num_chapters", EmitDefaultValue = false)]
        public int NumChapters { get; set; }

        /// <summary>
        /// Gets or Sets Authors
        /// </summary>
        [DataMember(Name = "authors", EmitDefaultValue = false)]
        public List<PersonRoleEdge> Authors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MangaForListAllOf {\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MyListStatus: ").Append(MyListStatus).Append("\n");
            sb.Append("  NumVolumes: ").Append(NumVolumes).Append("\n");
            sb.Append("  NumChapters: ").Append(NumChapters).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MangaForListAllOf);
        }

        /// <summary>
        /// Returns true if MangaForListAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MangaForListAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MangaForListAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MyListStatus == input.MyListStatus ||
                    (this.MyListStatus != null &&
                    this.MyListStatus.Equals(input.MyListStatus))
                ) && 
                (
                    this.NumVolumes == input.NumVolumes ||
                    this.NumVolumes.Equals(input.NumVolumes)
                ) && 
                (
                    this.NumChapters == input.NumChapters ||
                    this.NumChapters.Equals(input.NumChapters)
                ) && 
                (
                    this.Authors == input.Authors ||
                    this.Authors != null &&
                    input.Authors != null &&
                    this.Authors.SequenceEqual(input.Authors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MediaType != null)
                {
                    hashCode = (hashCode * 59) + this.MediaType.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.MyListStatus != null)
                {
                    hashCode = (hashCode * 59) + this.MyListStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumVolumes.GetHashCode();
                hashCode = (hashCode * 59) + this.NumChapters.GetHashCode();
                if (this.Authors != null)
                {
                    hashCode = (hashCode * 59) + this.Authors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
