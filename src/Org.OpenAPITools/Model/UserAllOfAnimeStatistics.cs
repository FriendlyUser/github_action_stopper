/*
 * MyAnimeList API (beta ver.)
 *
 * MyAnimeList.net is the property of MyAnimeList Co.,Ltd. All Rights Reserved.  ## Versioning  There are multiple versions of the API. You can specify a version by including it in the request uri:  (During closed beta, version starts with '0.')  `https://api.myanimelist.net/v2`  The version is incremented if any backwards incompatible changes are introduced to the API.  Examples of backwards incompatible changes are belows:  - Removing existing endpoints. - Removing existing fields of API responses. - Changing mean of the existing fields.  On the other hand, belows are examples of backwards compatible changes:  - Adding new endpoints. - Adding new optional request parameters. - Adding new fields to existing API responses. - Changing the order of fields in existing API responses. - Changing the contents of fields that suffixed by `_formatted`.   ## Common formats  ### List / Pagination  ```json {   \"data\": [     {...},     {...},     ...   ],   \"paging\": {     \"previous\": \"https://xxx\",     \"next\": \"https://xxx\"   } } ```      ### Date / Time format  <table> <tr> <th>Format <th>Type <th>Sample <th>Description </tr>  <tr> <td>date-time <td>string <td>\"2015-03-02T06:03:11+00:00\"  <td>ISO 8601 </tr>      <tr> <td>date <td>string <td>\"2017-10-23\" or <br>\"2017-10\" or <br>\"2017\" <td> </tr>  <tr> <td>time <td>string <td>\"01:35\" <td> </tr>  </table>  ### Error format   ```json {   \"error\": \"invalid_token\"   \"message\": \"token is invalid\", } ```  ## Common parameters  ### Parameters for endpoints that return a list  | Name | Description | | - -- | - -- | | limit |  | | offset |  |  ### Choosing fields  By default, the API doesn’t return all fields.  You can choose the fields that you want returned with the `fields` parameter.  Example:  ``` fields=synopsis,my_list_status{priority,comments} ```  ### Not Safe For Work  By default, some APIs don’t return nsfw content.  You can control this behavior with the `nsfw` parameter.  | Name | Description | | - -- | - -- | | nsfw | `true` or `false` |   ## Common status codes  | Status code | Error code | Description | | - -- - | - -- - | - -- - | | 400 Bad Request | - | Invalid Parameters | | 401 Unauthorized | invalid_token | Expired access tokens, Invalid access tokens, etc. | | 403 Forbidden | - | DoS detected etc. | | 404 Not Found | - | |  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserAllOfAnimeStatistics
    /// </summary>
    [DataContract(Name = "User_allOf_anime_statistics")]
    public partial class UserAllOfAnimeStatistics : IEquatable<UserAllOfAnimeStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAllOfAnimeStatistics" /> class.
        /// </summary>
        /// <param name="numItemsWatching">numItemsWatching.</param>
        /// <param name="numItemsCompleted">numItemsCompleted.</param>
        /// <param name="numItemsOnHold">numItemsOnHold.</param>
        /// <param name="numItemsDropped">numItemsDropped.</param>
        /// <param name="numItemsPlanToWatch">numItemsPlanToWatch.</param>
        /// <param name="numItems">numItems.</param>
        /// <param name="numDaysWatched">numDaysWatched.</param>
        /// <param name="numDaysWatching">numDaysWatching.</param>
        /// <param name="numDaysCompleted">numDaysCompleted.</param>
        /// <param name="numDaysOnHold">numDaysOnHold.</param>
        /// <param name="numDaysDropped">numDaysDropped.</param>
        /// <param name="numDays">num_watching_days + num_completed_days + num_on_hold_days + num_dropped_days .</param>
        /// <param name="numEpisodes">numEpisodes.</param>
        /// <param name="numTimesRewatched">numTimesRewatched.</param>
        /// <param name="meanScore">meanScore.</param>
        public UserAllOfAnimeStatistics(int numItemsWatching = default(int), int numItemsCompleted = default(int), int numItemsOnHold = default(int), int numItemsDropped = default(int), int numItemsPlanToWatch = default(int), int numItems = default(int), float numDaysWatched = default(float), float numDaysWatching = default(float), float numDaysCompleted = default(float), float numDaysOnHold = default(float), float numDaysDropped = default(float), float numDays = default(float), int numEpisodes = default(int), int numTimesRewatched = default(int), float meanScore = default(float))
        {
            this.NumItemsWatching = numItemsWatching;
            this.NumItemsCompleted = numItemsCompleted;
            this.NumItemsOnHold = numItemsOnHold;
            this.NumItemsDropped = numItemsDropped;
            this.NumItemsPlanToWatch = numItemsPlanToWatch;
            this.NumItems = numItems;
            this.NumDaysWatched = numDaysWatched;
            this.NumDaysWatching = numDaysWatching;
            this.NumDaysCompleted = numDaysCompleted;
            this.NumDaysOnHold = numDaysOnHold;
            this.NumDaysDropped = numDaysDropped;
            this.NumDays = numDays;
            this.NumEpisodes = numEpisodes;
            this.NumTimesRewatched = numTimesRewatched;
            this.MeanScore = meanScore;
        }

        /// <summary>
        /// Gets or Sets NumItemsWatching
        /// </summary>
        [DataMember(Name = "num_items_watching", EmitDefaultValue = false)]
        public int NumItemsWatching { get; set; }

        /// <summary>
        /// Gets or Sets NumItemsCompleted
        /// </summary>
        [DataMember(Name = "num_items_completed", EmitDefaultValue = false)]
        public int NumItemsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets NumItemsOnHold
        /// </summary>
        [DataMember(Name = "num_items_on_hold", EmitDefaultValue = false)]
        public int NumItemsOnHold { get; set; }

        /// <summary>
        /// Gets or Sets NumItemsDropped
        /// </summary>
        [DataMember(Name = "num_items_dropped", EmitDefaultValue = false)]
        public int NumItemsDropped { get; set; }

        /// <summary>
        /// Gets or Sets NumItemsPlanToWatch
        /// </summary>
        [DataMember(Name = "num_items_plan_to_watch", EmitDefaultValue = false)]
        public int NumItemsPlanToWatch { get; set; }

        /// <summary>
        /// Gets or Sets NumItems
        /// </summary>
        [DataMember(Name = "num_items", EmitDefaultValue = false)]
        public int NumItems { get; set; }

        /// <summary>
        /// Gets or Sets NumDaysWatched
        /// </summary>
        [DataMember(Name = "num_days_watched", EmitDefaultValue = false)]
        public float NumDaysWatched { get; set; }

        /// <summary>
        /// Gets or Sets NumDaysWatching
        /// </summary>
        [DataMember(Name = "num_days_watching", EmitDefaultValue = false)]
        public float NumDaysWatching { get; set; }

        /// <summary>
        /// Gets or Sets NumDaysCompleted
        /// </summary>
        [DataMember(Name = "num_days_completed", EmitDefaultValue = false)]
        public float NumDaysCompleted { get; set; }

        /// <summary>
        /// Gets or Sets NumDaysOnHold
        /// </summary>
        [DataMember(Name = "num_days_on_hold", EmitDefaultValue = false)]
        public float NumDaysOnHold { get; set; }

        /// <summary>
        /// Gets or Sets NumDaysDropped
        /// </summary>
        [DataMember(Name = "num_days_dropped", EmitDefaultValue = false)]
        public float NumDaysDropped { get; set; }

        /// <summary>
        /// num_watching_days + num_completed_days + num_on_hold_days + num_dropped_days 
        /// </summary>
        /// <value>num_watching_days + num_completed_days + num_on_hold_days + num_dropped_days </value>
        [DataMember(Name = "num_days", EmitDefaultValue = false)]
        public float NumDays { get; set; }

        /// <summary>
        /// Gets or Sets NumEpisodes
        /// </summary>
        [DataMember(Name = "num_episodes", EmitDefaultValue = false)]
        public int NumEpisodes { get; set; }

        /// <summary>
        /// Gets or Sets NumTimesRewatched
        /// </summary>
        [DataMember(Name = "num_times_rewatched", EmitDefaultValue = false)]
        public int NumTimesRewatched { get; set; }

        /// <summary>
        /// Gets or Sets MeanScore
        /// </summary>
        [DataMember(Name = "mean_score", EmitDefaultValue = false)]
        public float MeanScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAllOfAnimeStatistics {\n");
            sb.Append("  NumItemsWatching: ").Append(NumItemsWatching).Append("\n");
            sb.Append("  NumItemsCompleted: ").Append(NumItemsCompleted).Append("\n");
            sb.Append("  NumItemsOnHold: ").Append(NumItemsOnHold).Append("\n");
            sb.Append("  NumItemsDropped: ").Append(NumItemsDropped).Append("\n");
            sb.Append("  NumItemsPlanToWatch: ").Append(NumItemsPlanToWatch).Append("\n");
            sb.Append("  NumItems: ").Append(NumItems).Append("\n");
            sb.Append("  NumDaysWatched: ").Append(NumDaysWatched).Append("\n");
            sb.Append("  NumDaysWatching: ").Append(NumDaysWatching).Append("\n");
            sb.Append("  NumDaysCompleted: ").Append(NumDaysCompleted).Append("\n");
            sb.Append("  NumDaysOnHold: ").Append(NumDaysOnHold).Append("\n");
            sb.Append("  NumDaysDropped: ").Append(NumDaysDropped).Append("\n");
            sb.Append("  NumDays: ").Append(NumDays).Append("\n");
            sb.Append("  NumEpisodes: ").Append(NumEpisodes).Append("\n");
            sb.Append("  NumTimesRewatched: ").Append(NumTimesRewatched).Append("\n");
            sb.Append("  MeanScore: ").Append(MeanScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAllOfAnimeStatistics);
        }

        /// <summary>
        /// Returns true if UserAllOfAnimeStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAllOfAnimeStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAllOfAnimeStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumItemsWatching == input.NumItemsWatching ||
                    this.NumItemsWatching.Equals(input.NumItemsWatching)
                ) && 
                (
                    this.NumItemsCompleted == input.NumItemsCompleted ||
                    this.NumItemsCompleted.Equals(input.NumItemsCompleted)
                ) && 
                (
                    this.NumItemsOnHold == input.NumItemsOnHold ||
                    this.NumItemsOnHold.Equals(input.NumItemsOnHold)
                ) && 
                (
                    this.NumItemsDropped == input.NumItemsDropped ||
                    this.NumItemsDropped.Equals(input.NumItemsDropped)
                ) && 
                (
                    this.NumItemsPlanToWatch == input.NumItemsPlanToWatch ||
                    this.NumItemsPlanToWatch.Equals(input.NumItemsPlanToWatch)
                ) && 
                (
                    this.NumItems == input.NumItems ||
                    this.NumItems.Equals(input.NumItems)
                ) && 
                (
                    this.NumDaysWatched == input.NumDaysWatched ||
                    this.NumDaysWatched.Equals(input.NumDaysWatched)
                ) && 
                (
                    this.NumDaysWatching == input.NumDaysWatching ||
                    this.NumDaysWatching.Equals(input.NumDaysWatching)
                ) && 
                (
                    this.NumDaysCompleted == input.NumDaysCompleted ||
                    this.NumDaysCompleted.Equals(input.NumDaysCompleted)
                ) && 
                (
                    this.NumDaysOnHold == input.NumDaysOnHold ||
                    this.NumDaysOnHold.Equals(input.NumDaysOnHold)
                ) && 
                (
                    this.NumDaysDropped == input.NumDaysDropped ||
                    this.NumDaysDropped.Equals(input.NumDaysDropped)
                ) && 
                (
                    this.NumDays == input.NumDays ||
                    this.NumDays.Equals(input.NumDays)
                ) && 
                (
                    this.NumEpisodes == input.NumEpisodes ||
                    this.NumEpisodes.Equals(input.NumEpisodes)
                ) && 
                (
                    this.NumTimesRewatched == input.NumTimesRewatched ||
                    this.NumTimesRewatched.Equals(input.NumTimesRewatched)
                ) && 
                (
                    this.MeanScore == input.MeanScore ||
                    this.MeanScore.Equals(input.MeanScore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NumItemsWatching.GetHashCode();
                hashCode = (hashCode * 59) + this.NumItemsCompleted.GetHashCode();
                hashCode = (hashCode * 59) + this.NumItemsOnHold.GetHashCode();
                hashCode = (hashCode * 59) + this.NumItemsDropped.GetHashCode();
                hashCode = (hashCode * 59) + this.NumItemsPlanToWatch.GetHashCode();
                hashCode = (hashCode * 59) + this.NumItems.GetHashCode();
                hashCode = (hashCode * 59) + this.NumDaysWatched.GetHashCode();
                hashCode = (hashCode * 59) + this.NumDaysWatching.GetHashCode();
                hashCode = (hashCode * 59) + this.NumDaysCompleted.GetHashCode();
                hashCode = (hashCode * 59) + this.NumDaysOnHold.GetHashCode();
                hashCode = (hashCode * 59) + this.NumDaysDropped.GetHashCode();
                hashCode = (hashCode * 59) + this.NumDays.GetHashCode();
                hashCode = (hashCode * 59) + this.NumEpisodes.GetHashCode();
                hashCode = (hashCode * 59) + this.NumTimesRewatched.GetHashCode();
                hashCode = (hashCode * 59) + this.MeanScore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
